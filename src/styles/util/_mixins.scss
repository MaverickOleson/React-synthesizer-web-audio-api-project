//This is a short cut to center any block element

@mixin center-auto {
    margin: {
        left: auto;
        right: auto;
    }
}

/*
div{
    @include center-auto()
}
*/

//Center any block element
@mixin push--autoCenter {
    margin: {
        right: auto;
        left: auto;
    }
}

//Creating scalable elemts such as
//images or backgrounds that require a ratio
@mixin responsive-ratio($x, $y, $pseudo: false) {
    $padding: unquote(($y / $x) * 100 + '%');
    @if $pseudo {
        &:before {
            @include psuedo($pos: relative);
            width: 100%;
        }
    } @else {
        padding-top: $padding;
    }
}

//flexbox toolkit
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center();
    flex-direction: column;
}
@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

//this is when we use ::after and ::before
@mixin pseudo(
    $width: 100%,
    $height: 100%,
    $display: block,
    $pos: absolute,
    $content: ''
) {
    content: $content;
    display: $display;
    position: $pos;
    @include box($width, $height);
}

@mixin fade($type) {
    @if $type == 'hide' {
        visibility: hidden;
        opacity: 0;
        transition: visibility 1s opacity 1s;
    } @else if $type == 'show' {
        visibility: visible;
        opacity: 1;
        transition: visibility 1s opacity 1s;
    }
}

//font face mixin
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot'); //$file-name + ".eot"
        src: url($file-name + '.eot?#iefix') format(embedded-opentype)
                url($file-name + '.woff') format('woff'),
            url($file-name + '.ttf') format('truetype'),
            url($file-name + '.svg') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

//This is a simple way to define a box
@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

//cover my whole background mixin
@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}
/*
    div{
        background-image: url('pic.jpg');
        @include mixin.cover-background();
    }
*/

//this is when we use ::after and ::before
@mixin beforeAfter(
    $width: 100%,
    $height: 100%,
    $display: block,
    $pos: absolute,
    $content: ''
) {
    content: $content;
    display: $display;
    position: $pos;
    @include box($width, $height);
}

@mixin position($position, $args) {
    @each $pos in top right bottom left {
        $i: index($args, $pos);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) {
            #{$pos}: nth($args, $i + 1);
        }
    }
}

@mixin absolute($args: ' ') {
    @include posiiton(absolute, $args);
}
@mixin absolute($args: ' ') {
    @include posiiton(fixed, $args);
}
@mixin absolute($args: ' ') {
    @include posiiton(relative, $args);
}

/* .menu li {
        @include absolute(top 100% left 0)    
    }
    .sticky-bar{
        @include fixed(top 0 left 0)
    }
    .submenu{
        @include relative()
    }
*/

$phone-wide: 480px;
$phablet: 560px;
$tablet-small: 640px;
$tablet: 768px;
$large: 1024px;
$desktop: 1280px;
$desktop-wide: 1440px;

@mixin phone {
    @media only screen and (min-width: $phone-wide) {
        @content;
    }
}
@mixin tablet {
    @media only screen and (min-width: $tablet) {
        @content;
    }
}
@mixin large {
    @media only screen and (min-width: $large) {
        @content;
    }
}
@mixin desktop {
    @media only screen and (min-width: $desktop) {
        @content;
    }
}
@mixin desktop-wide {
    @media only screen and (min-width: $desktop-wide) {
        @content;
    }
}

@mixin input-placeholdre {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin animateDelay($delay: 100ms) {
    @for $i from 1 through 50 {
        &:nth-child(#{$i}) {
            transition-delay: $delay * $i;
        }
    }
} //adds delay to children n stuff (;
